#include<iostream>
#include <cmath>
using namespace std;
class diem
{
public:
    int x;
    int y;
    diem(int x,int y):x(x),y(y){}
};
class node
{
public:
    diem data;
    node* next;
    node(diem data):data(data),next(NULL){}
};
class list
{
public:
    node* head;
    node* tail;
    list():head(NULL),tail(NULL){}
    void add_node(int& ,int& );
    void selection(list );
    void print_list();
};

void list::add_node(int& x,int& y)
{
    node* p=new node(diem(x,y));
    if(head==NULL){
        head=p;
        tail=p;
        return;
    } else {
        tail->next=p;
        tail=p;
    }
    return;
}
void list::selection(list l)
{
    node* p=l.head;
    while(p!=NULL){
        node* q=p->next;
        while(q!=NULL){
             double a=pow(p->data.x,2)+pow(p->data.y,2);
             double b=pow(q->data.x,2)+pow(q->data.y,2);
             if(a>b || (a==b && p->data.x>q->data.x)){
                diem temp=p->data;
                p->data=q->data;
                q->data=temp;
             }
             q=q->next;
        }
        p=p->next;
    }
}
void list::print_list()
{
    node*p=head;
    while(p!=NULL){
        cout<<p->data.x<<" "<<p->data.y<<endl;
        p=p->next;
    }
}
int main()
{
    list l;
    int n;
    cin>>n;
    for(int i=0;i<n;i++){
        int x,y;
        cin>>x>>y;
        l.add_node(x,y);
    }
    l.selection(l);
    l.print_list();
    return 0;
}
