#include <iomanip>
#include <iostream>
#include <string>
using namespace std;

struct NGAY {
    int Ngay, Thang, Nam;
};
struct SINHVIEN {
    string MASV;
    string HoTen;
    NGAY NgaySinh;
    char GioiTinh;
    float DiemToan, DiemLy, DiemHoa, DTB;
};
struct NODE{
    SINHVIEN key;
    NODE* pNext;
};
struct LIST{
    NODE*pHead, *pTail;
};

void NhapNgay(NGAY &);
void XuatNgay(NGAY);
void NhapSinhVien(SINHVIEN &);
void XuatSinhVien(SINHVIEN );
NODE* CreateNode(SINHVIEN );
void CreateEmptyList(LIST &);
void AddTail(LIST&, NODE* );
void XuatDS(LIST L);
void NhapDS(LIST &, int );
void Tim_SinhVien_TheoNamSinh(LIST, int);

int main() {
    LIST L;
    int n, namsinh;

    cin >> namsinh;
    cin >> n ;
    NhapDS(L, n);

    Tim_SinhVien_TheoNamSinh(L, namsinh);

    return 0;
}
void NhapNgay(NGAY &a){
    cin >> a.Ngay >> a.Thang >> a.Nam;
}
void XuatNgay(NGAY a){
    cout << a.Ngay << "/" << a.Thang << "/" << a.Nam;
}
void NhapSinhVien(SINHVIEN &a){
    cin >> ws;
    getline(cin, a.MASV);
    getline(cin, a.HoTen);
    NhapNgay(a.NgaySinh);
    cin >> a.GioiTinh;
    cin >> a.DiemToan >> a.DiemLy >> a.DiemHoa;
    a.DTB = (a.DiemToan + a.DiemLy + a.DiemHoa) / 3;
}
void XuatSinhVien(SINHVIEN a){
    cout << a.MASV;         cout << "\t";
    cout << a.HoTen;        cout << "\t";
    XuatNgay(a.NgaySinh);   cout << "\t";
    cout << a.GioiTinh;     cout << "\t";
    cout << a.DiemToan;     cout << "\t";
    cout << a.DiemLy;       cout << "\t";
    cout << a.DiemHoa;      cout << "\t";
    cout << setprecision(3);
    cout << a.DTB;
}
NODE* CreateNode(SINHVIEN x)
{
    NODE* a=new NODE;
    a->key=x;
    a->pNext=NULL;
    return a;
}
void CreateEmptyList(LIST& L)
{
    L.pHead = NULL;
    L.pTail=NULL;
}
void AddTail(LIST& L, NODE* a)
{
    if( L.pHead == NULL){
        L.pHead=a;
        L.pTail=a;
    } else {
       L.pTail-> pNext =a;
       L.pTail=a;
    }
}
void NhapDS(LIST& L, int n)
{
    CreateEmptyList(L);
    for(int i=0;i<n;i++){
        SINHVIEN a ;
        NhapSinhVien(a);
        NODE* b= CreateNode(a);
        AddTail(L,b);
    }
}
void XuatDS()
{

}
void Tim_SinhVien_TheoNamSinh(LIST L,int nam)
{
    NODE*p=L.pHead;
    bool a=true;
    while(p!=NULL){
        if(p->key.NgaySinh.Nam ==nam ){
            XuatSinhVien(p->key);
            a=false ;
            cout<<endl;
        }
        p=p->pNext;}
        if(p==NULL && a== true){
            cout<<"Not found in list."<<endl;
        }

}
