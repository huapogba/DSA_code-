
#include <bits/stdc++.h>
using namespace std;


class Node {
    public:
        int data;
        Node *left;
        Node *right;
        Node(int d) {
            data = d;
            left = NULL;
            right = NULL;
        }
};

class Solution {
    public:
  		Node* insert(Node* root, int data) {
            if(root == NULL) {
                return new Node(data);
            } else {
                Node* cur;
                if(data <= root->data) {
                    cur = insert(root->left, data);
                    root->left = cur;
                } else {
                    cur = insert(root->right, data);
                    root->right = cur;
                }

               return root;
           }
        }

/* you only have to complete the function given below.
Node is defined as

class Node {
    public:
        int data;
        Node *left;
        Node *right;
        Node(int d) {
            data = d;
            left = NULL;
            right = NULL;
        }
};

*/
bool checkBST(Node* root) {
    if(root== NULL){
        return true;
    }
     if (root->left != NULL && root->left->data >= root->data) {
        return false;
    }
    if (root->right != NULL && root->right->data <= root->data) {
        return false;
    }
    int a=checkBST(root->left);
    int b=checkBST(root->right);
    if(a==b || a==b+1 || b==a+1){
        return true;
    } else {
        return false;
    }
}
}; //End of Solution

int main() {

    Solution myTree;
    Node* root = NULL;

    int t;
    int data;

    std::cin >> t;

    while(t-- > 0) {
        std::cin >> data;
        root = myTree.insert(root, data);
    }

    std::cout<<myTree.checkBST(root);

    return 0;
}
